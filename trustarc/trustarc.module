<?php

use Drupal\Core\Cache\Cache;
use Drupal\filter\FilterPluginCollection;
use Drupal\Core\Template\Attribute;



/**
 * Implements hook_page_attachments_alter().
 */
function trustarc_page_attachments_alter(array &$page) {
  \Drupal::logger('trustarc')->notice('trustarc_page_attachments_alter() executed');

  $config = \Drupal::config('trustarc.settings');
  $cmp_version = $config->get('cmp_version', 'advanced');
  $cmp_script = $config->get('cmp_script');
  $cmp_script_params = $config->get('cmp_script_params');
  $cmp_preferences_selector = $config->get('cmp_preferences_selector');
  $cmp_preferences = $config->get('cmp_preferences');

  
  if (empty($cmp_script)) {
    return;
  }

  $hostname = 'https://consent.trustarc.com';
  $separator = '';

  if (!empty($cmp_script_params)) {
    if ($cmp_version == 'advanced') {
      if (strpos($cmp_script_params, '&') !== 0) { 
        $separator = '&';
      }
      $script_url = $hostname . "/notice?domain=" . $cmp_script . $separator . $cmp_script_params;
    } else { // Pro version
      if (strpos($cmp_script_params, '?') !== 0) { 
        $separator = '?';
      }
      $script_url = $hostname . "/v2/notice/" . $cmp_script . $separator . $cmp_script_params;
    }
  } else {
    $script_url = $hostname . ($cmp_version == 'advanced' ? "/notice?domain=" : "/v2/notice/") . $cmp_script;
  }

  // Inject TrustArc script
  $trustarc_script = [
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#attributes' => [
      'id' => 'trustarc-cmp',
      'type' => 'text/javascript',
      'src' => $script_url,
      'defer' => 'defer',
    ],
  ];


  if (!empty($cmp_preferences)) {

    // JavaScript to dynamically inject the div in the specified location
    $trustarc_div_script = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => "
        document.addEventListener('DOMContentLoaded', function() {
          var targetElement = document.querySelector('$cmp_preferences_selector');
          if (targetElement) {
            var trustarcDiv = document.createElement('div');
           trustarcDiv.id = 'teconsent';
           trustarcDiv.className = 'trustarc-container';
           targetElement.appendChild(trustarcDiv);
           console.log('TrustArc div injected into:', targetElement);
          } else {
            console.warn('TrustArc target element not found:', '$cmp_preferences_selector');
          }
        });
      ",
    ];
  }
  // Ensure 'html_head' array exists
  if (!isset($page['#attached']['html_head'])) {
    $page['#attached']['html_head'] = [];
  }

  array_unshift($page['#attached']['html_head'], [$trustarc_script, 'trustarc_script']);


  if (!empty($cmp_preferences)) {
    array_unshift($page['#attached']['html_head'], [$trustarc_div_script, 'trustarc_div_script']);
  }


}
/**
 * Implements hook_page_attachments().
 */
function trustarc_page_attachments(array &$attachments) {
  $config = \Drupal::config('trustarc.settings');
  $cmp_version = $config->get('cmp_version', 'advanced');
  $cmp_script = $config->get('cmp_script');
  $cmp_script_params = $config->get('cmp_script_params');
  $cmp_preferences_selector = $config->get('cmp_preferences_selector');
  $cmp_preferences = $config->get('cmp_preferences');
  $name = $cmp_script ?: 'Default Name';

  $attachments['#attached']['library'][] = 'trustarc/trustarc_js';
  $attachments['#attached']['drupalSettings']['trustarc'] = [
    'name' => $name,
    'cmp_version' => $cmp_version,
    'cmp_script' => $cmp_script,
    'cmp_script_params' => $cmp_script_params,
    'cmp_preferences_selector' => $cmp_preferences_selector,
    'cmp_preferences' => $cmp_preferences,
    'gcmEnabled' => $config->get('gcm_enabled'),
    'gaMeasurementId' => $config->get('ga_measurement_id'),
    'dataRedaction' => $config->get('data_redaction'),
    'urlPassthrough' => $config->get('url_passthrough'),
    'googleConsentFields' => $config->get('google_consent_fields'),
    'waitForUpdate' => $config->get('wait_for_update'),
    'wpConsentApiEnabled' => $config->get('wp_consent_api_enabled'),
    'wpConsentApiMapping' => $config->get('wp_consent_api_mapping'),
    'impliedLocation' => $config->get('implied_location'),
    'standardEventListener' => $config->get('standard_event_listener'),
  ];
}
