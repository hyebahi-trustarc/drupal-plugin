<?php

use Drupal\Core\Cache\Cache;
use Drupal\filter\FilterPluginCollection;
use Drupal\Core\Template\Attribute;

function trustarc_page_attachments_alter(array &$page) {
  \Drupal::logger('trustarc')->notice('trustarc_page_attachments_alter() executed');

  $config = \Drupal::config('trustarc.settings');
  $cmp_version = $config->get('cmp_version', 'advanced');
  $cmp_script = $config->get('cmp_script');
  $cmp_script_params = $config->get('cmp_script_params');
  $cmp_preferences_selector = $config->get('cmp_preferences_selector');
  $cmp_preferences = $config->get('cmp_preferences');
  if (empty($cmp_script)) {
    return;
  }

  $hostname = 'https://consent.trustarc.com';
  $separator = '';

  if (!empty($cmp_script_params)) {
    if ($cmp_version == 'advanced') {
      if (strpos($cmp_script_params, '&') !== 0) { 
        $separator = '&';
      }
      $script_url = $hostname . "/notice?domain=" . $cmp_script . $separator . $cmp_script_params;
    } else { // Pro version
      if (strpos($cmp_script_params, '?') !== 0) { 
        $separator = '?';
      }
      $script_url = $hostname . "/v2/notice/" . $cmp_script . $separator . $cmp_script_params;
    }
  } else {
    $script_url = $hostname . ($cmp_version == 'advanced' ? "/notice?domain=" : "/v2/notice/") . $cmp_script;
  }

  // Inject TrustArc script
  $trustarc_script = [
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#attributes' => [
      'id' => 'trustarc-cmp',
      'type' => 'text/javascript',
      'src' => $script_url,
      'defer' => 'defer',
    ],
  ];

  // Ensure 'html_head' array exists
  if (!isset($page['#attached']['html_head'])) {
    $page['#attached']['html_head'] = [];
  }

  // Attach the TrustArc script for CMP
  array_unshift($page['#attached']['html_head'], [$trustarc_script, 'trustarc_script']);

  // Check if Google Consent Mode is enabled
  if ($config->get('cmp_google_consent_mode')) {
    // Build the JavaScript dynamically with the logic for Google Consent Mode
    $googleConsentMode = $config->get('cmp_google_consent_mode');
    $gaMeasurementId = $config->get('cmp_ga_measurement_id');
    $adsDataRedaction = $config->get('cmp_ads_data_redaction');
    $urlPassthrough = $config->get('cmp_url_passthrough');
    $consentTypeMapping = $config->get('cmp_consent_type_mapping');
    $waitForUpdate = $config->get('cmp_wait_for_update');

    // Replace settings.trustarc values with hardcoded values from the config
    $js_content = "
      // Ensure that the script runs only on the page where Google Consent Mode is enabled.
      if ($googleConsentMode) {
        window.dataLayer = window.dataLayer || [];
        const dataLayer = window.dataLayer || [];

        function gtag() { dataLayer.push(arguments); }

        // Google Consent Mode integration
        gtag('js', new Date());
        gtag('set', 'developer_id.dNTIxZG', true);

        // Conditionally set Google Analytics if enabled
        if ('$gaMeasurementId') {
          gtag('config', '$gaMeasurementId');
        }

        // Additional Google Consent Mode options (Data Redaction, URL Passthrough)
        gtag('set', 'ads_data_redaction', $adsDataRedaction);
        gtag('set', 'url_passthrough', $urlPassthrough);

        const consentTypesMapped = $consentTypeMapping || [];

        // Consent state mapping
        const ConsentType = {
          DENIED: 'denied',
          GRANTED: 'granted',
        };

        // Refactored to use a traditional function instead of arrow function
        function booleanToConsentStatus(boolean) {
          return boolean ? ConsentType.GRANTED : ConsentType.DENIED;
        }

        const getConsentState = function(prefCookie) {
          let consentStates = {};

          for (const consentType in consentTypesMapped) {
            const id = consentTypesMapped[consentType];
            consentStates[consentType] = booleanToConsentStatus(prefCookie.includes(id));
          }

          consentStates['wait_for_update'] = '$waitForUpdate';  // Ensure the correct condition

          return consentStates;
        };

        // Handle the consent decision
        function handleConsentDecision(consent) {
          const consentStates = getConsentState(consent);
          gtag('consent', 'default', consentStates);
        }

        // Listening for cookie preferences message
        window.addEventListener('message', function(event) {
          let eventDataJson = null;
          try {
            eventDataJson = JSON.parse(event.data);
          } catch (error) {
            console.error('Invalid message data:', error);
          }

          if (eventDataJson.source === 'preference_manager') {
            if (eventDataJson.message === 'submit_preferences') {
              setTimeout(function() {
                // Simulate getting consent decision
                const consentDecision = {};  // Get this from TrustArc API or your consent manager.
                handleConsentDecision(consentDecision);
              }, 500);
            }
          }
        }, false);
      }
    ";

    // Inject the Google Consent Mode JavaScript directly into the page
    $google_consent_script = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => $js_content,
    ];

    // Attach the Google Consent Mode script
    $page['#attached']['html_head'][] = [$google_consent_script, 'trustarc_google_consent_mode_script'];
  }

  // Inject the TrustArc div if preferences are enabled
  if (!empty($cmp_preferences)) {
    $trustarc_div_script = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => "
        document.addEventListener('DOMContentLoaded', function() {
          var targetElement = document.querySelector('$cmp_preferences_selector');
          if (targetElement) {
            var trustarcDiv = document.createElement('div');
           trustarcDiv.id = 'teconsent';
           trustarcDiv.className = 'trustarc-container';
           targetElement.appendChild(trustarcDiv);
           console.log('TrustArc div injected into:', targetElement);
          } else {
            console.warn('TrustArc target element not found:', '$cmp_preferences_selector');
          }
        });
      ",
    ];
    array_unshift($page['#attached']['html_head'], [$trustarc_div_script, 'trustarc_div_script']);
  }
}

/**
 * Injects a TrustArc banner div.
 */
function trustarc_page_top(array &$page_top) {
  $config = \Drupal::config('trustarc.settings');
  $cmp_banner = $config->get('cmp_banner', 'consent_blackbar'); // Default ID

  if (!empty($cmp_banner)) {
    $page_top['trustarc'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'id' => $cmp_banner
      ],
      '#value' => '',
    ];
  }
}

/**
 * Implements hook_page_top_alter().
 */
function trustarc_page_top_alter(array &$page_top) {
  trustarc_page_top($page_top);
}

/**
 * Implements hook_node_view().
 */
function trustarc_node_view(array &$build) {
}

/**
 * Implements hook_node_view_alter().
 */
function trustarc_node_view_alter(array &$build) {
  trustarc_node_view($build);
}

